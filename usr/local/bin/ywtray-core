#!/usr/bin/env bash
# 
# i18n nilsonmorales
# l10n nilsonmorales
trap ' ywtray_close ; s=$?; echo >&2 "$0: Exit code on line "$LINENO": $BASH_COMMAND" ; exit $s ;' INT ERR EXIT TERM KILL
set -euo pipefail
#set -x
export TEXTDOMAIN=ywtray
export OUTPUT_CHARSET=UTF-8
source "/root/ywtray/usr/local/bin/ywtray-functions"
# VARIABLES 
#location=''                   # Town, Country OR State      needed by https://geocode.maps.co
#declare -a weather_data       # array to store data variables requested to open-meteo
#declare -a location_and_units # array to store location and weather preferred units
#declare -a request_lat_lon    # array to store the latitude and longitude pair for the location
#latitude=''                   #                             needed by https://api.open-meteo.com/v1/forecast
#longitude=''                  #                             needed by https://api.open-meteo.com/v1/forecast
current_weather='true'        #                             needed by https://api.open-meteo.com/v1/forecast
#temp_unit=''                  #                             needed by https://api.open-meteo.com/v1/forecast
#windspeed_unit=''             # kmh, ms, mph, kn            needed by https://api.open-meteo.com/v1/forecast
timeformat='iso8601'          #                             needed by https://api.open-meteo.com/v1/forecast
timezone="auto"
#timezone="$(date "+%Z")"      #                             needed by https://api.open-meteo.com/v1/forecast
#wicon=''                      # weather icon indicator name
#wtext=''                      # current weather text description as privided by open-meteo.com
icons_dir="/root/ywtray/opt/ywtray-icons"    # weather icons location
#epoch_time                   # used in function weather_icon_descriptor, a local variable declared
#temperature_suffix=''         # suffix F or C to be written in the tooltip
#wind_speed_suffix=''          # suffix mph, kn to be written in the tooltip

pid_tray=''                   # process id of the yad dialog icon notifier

export icons_dir

function ywtray_close () {
    
    exec 6>&-
    rm -f "${named_pipe}"
    kill -USR1 "$YAD_PID"
    kill -9 "$(ps aux | grep "ywtray-core" | awk '$12 ~ /ywtray-core$/ && $11 ~ /bash/{print $2}')"
    kill -9 "$(ps aux | grep "ywtray" | awk '$12 ~ /ywtray$/ && $11 ~ /bash/{print $2}')"

}

export -f ywtray_close

function ywtray_reset () {
    
    yad \
     --title="$(gettext 'ywtray - reset')" \
     --image="dialog-warning" \
     --center \
     --text="$(gettext 'Do you want to reset your ywtray settings?')" \
     --window-icon="${icons_dir}/cloudy-1-day.svg" \
     --button=$(gettext no)!gtk-no:1 \
     --button=$(gettext yes)!gtk-ok:0

    reset_answer=$?

    if [[ $reset_answer = 0 ]]; then
        
        exec 6>&-
        
        rm -f "/root/.config/autostart/ywtray.desktop"
        
        rm -f "${named_pipe}"
        
        c1=$?
        
        kill -USR1 "$YAD_PID"
        
        c2=$?
        
        kill -9 "$(ps aux | grep "ywtray-core" | awk '/ywtray-core$/ && /bash/{print $2}')"
        
        c3=$?
        
        kill -9 "$(ps aux | grep "ywtray" | awk '/ywtray$/ && /bash/{print $2}')"
        
        c4=$?
        
        printf -- "first_run=\"true\"\n" > "/root/ywtray/.config/ywtray/ywtray.conf"
        
        c5=$?

        if [[ "${c1}" = "0" && "${c2}" = "0" && "${c3}" = "0" && "${c5}" = "0" ]]; then

            reset_result_message="$(gettext "ywtray has been successfully reset, start the program again")"
            reset_result_icon="dialog-information"
        
        else
     
            reset_result_message="$(gettext "Something went wrong, start the program again")"
            reset_result_icon="dialog-error"
        fi

      
    yad --splash --image="${reset_result_icon}" --skip-taskbar --no-buttons --timeout="3" --on-top --undecorated --center --text="${reset_result_message}" &
   
    fi
   

}

export -f ywtray_reset

export named_pipe="$(mktemp -u "/tmp/ywtrayXXXXXXXXXXXXX")"

mkfifo "${named_pipe}"
exec 6<> "${named_pipe}"


source "/root/ywtray/.config/ywtray/ywtray.conf"

weather_data=($(curl -s --retry 20 --retry-max 120 -k "https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,apparent_temperature,weather_code,wind_speed_10m,wind_direction_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,sunrise,sunset&temperature_unit=${temp_unit}&wind_speed_unit=${windspeed_unit}&timezone=${timezone}&forecast_days=3" | weather_data_parser))

# Current Weather Icon
wicon="$(weather_icon_descriptor ${weather_data[4]})"
# Current Weather Text Description
wtext="$(weather_text_descriptor ${weather_data[4]})"


# Weather Forecast 1d Icon
wicon1="$(weather_icon_descriptor ${weather_data[7]})"
# Weather Forecast 1d Text Description
wtext1="$(weather_text_descriptor ${weather_data[7]})"


# Weather Forecast 2d Icon
wicon2="$(weather_icon_descriptor ${weather_data[8]})"
# Weather Forecast 2d Text Description
wtext2="$(weather_text_descriptor ${weather_data[8]})"


# Weather Forecast 3d Icon
wicon3="$(weather_icon_descriptor ${weather_data[9]})"
# Weather Forecast 3d Text Description
wtext3="$(weather_text_descriptor ${weather_data[9]})"

set -x
yad --notification \
--listen \
--text="$(printf -- "$(gettext 'Place: ')%s\n%s\n$(gettext 'Temperature: ')%s \
%s\n$(gettext 'Real Feel: ')%s %s\n$(gettext 'Wind Speed: ') \
%s %s\n$(gettext 'Wind Direction: ')%s °"\
 "${location}" "${wtext}" "${weather_data[0]}"\
  "${temperature_suffix}" "${weather_data[1]}" "${temperature_suffix}" "${weather_data[2]}" "${wind_speed_suffix}" "${weather_data[3]}")" \
--image "${icons_dir}/${wicon}" \
--menu="$(gettext "TODAY'S FORECAST")|\
${wtext1}   ${weather_data[10]} ${temperature_suffix} / ${weather_data[13]} ${temperature_suffix}!!${icons_dir}/${wicon1}|\
$(gettext "Real Feel")   ${weather_data[16]} ${temperature_suffix} / ${weather_data[19]} ${temperature_suffix}!!${icons_dir}/ywtholder.svg|\
$(gettext "TOMORROW'S FORECAST")|\
${wtext2}   ${weather_data[11]} ${temperature_suffix} / ${weather_data[14]} ${temperature_suffix}!!${icons_dir}/${wicon2}|\
$(gettext "Real Feel")   ${weather_data[17]} ${temperature_suffix} / ${weather_data[20]} ${temperature_suffix}!!${icons_dir}/ywtholder.svg|\
$(gettext "48 HRS FORECAST")|${wtext2}   ${weather_data[12]} ${temperature_suffix} / ${weather_data[15]} ${temperature_suffix}!!${icons_dir}/${wicon3}|\
$(gettext "Real Feel")   ${weather_data[18]} ${temperature_suffix} / ${weather_data[21]} ${temperature_suffix}!!${icons_dir}/ywtholder.svg|\
----------------------------|\
$(gettext "Change location & units")!bash -c ywtray_reset!\
reload|\
$(gettext "Quit ywtray")!bash -c ywtray_close!exit" \
--no-middle \
--command=":" \
--icon-size 48 <&6 &

pid_tray=$!



while true ; do


    sleep 27m
    
    weather_data=($(curl -s --retry 20 --retry-max 120 -k "https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,apparent_temperature,weather_code,wind_speed_10m,wind_direction_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,sunrise,sunset&temperature_unit=${temp_unit}&wind_speed_unit=${windspeed_unit}&timezone=${timezone}&forecast_days=3" | weather_data_parser))

    # Current Weather Icon
wicon="$(weather_icon_descriptor ${weather_data[4]})"
# Current Weather Text Description
wtext="$(weather_text_descriptor ${weather_data[4]})"


# Weather Forecast 1d Icon
wicon1="$(weather_icon_descriptor ${weather_data[7]})"
# Weather Forecast 1d Text Description
wtext1="$(weather_text_descriptor ${weather_data[7]})"


# Weather Forecast 2d Icon
wicon2="$(weather_icon_descriptor ${weather_data[8]})"
# Weather Forecast 2d Text Description
wtext2="$(weather_text_descriptor ${weather_data[8]})"


# Weather Forecast 3d Icon
wicon3="$(weather_icon_descriptor ${weather_data[9]})"
# Weather Forecast 3d Text Description
wtext3="$(weather_text_descriptor ${weather_data[9]})"

    
    echo "icon:${icons_dir}/${wicon}" > "${named_pipe}"
    
    echo "tooltip:$(gettext Place:) \
${location}\n${wtext}\n$(gettext Temperature:) \
${weather_data[0]} ${temperature_suffix}\n\
$(gettext 'Real Feel:') ${weather_data[1]} ${temperature_suffix} \
\n$(gettext "Wind Speed:") ${weather_data[2]} \
${wind_speed_suffix}\n$(gettext "Wind Direction:") ${weather_data[3]} °" >> "${named_pipe}"

    echo "menu:$(gettext "TODAY'S FORECAST")|\
${wtext1}   ${weather_data[10]} ${temperature_suffix} / ${weather_data[13]} ${temperature_suffix}!!${icons_dir}/${wicon1}|\
$(gettext "Real Feel")   ${weather_data[16]} ${temperature_suffix} / ${weather_data[19]} ${temperature_suffix}!!${icons_dir}/ywtholder.svg|\
$(gettext "TOMORROW'S FORECAST")|\
${wtext2}   ${weather_data[11]} ${temperature_suffix} / ${weather_data[14]} ${temperature_suffix}!!${icons_dir}/${wicon2}|\
$(gettext "Real Feel")   ${weather_data[17]} ${temperature_suffix} / ${weather_data[20]} ${temperature_suffix}!!${icons_dir}/ywtholder.svg|\
$(gettext "48 HRS FORECAST")|${wtext2}   ${weather_data[12]} ${temperature_suffix} / ${weather_data[15]} ${temperature_suffix}!!${icons_dir}/${wicon3}|\
$(gettext "Real Feel")   ${weather_data[18]} ${temperature_suffix} / ${weather_data[21]} ${temperature_suffix}!!${icons_dir}/ywtholder.svg|\
----------------------------|\
$(gettext "Change location & units")!bash -c ywtray_reset!\
reload|\
$(gettext "Quit ywtray")!bash -c ywtray_close!exit" >> "${named_pipe}"

done

exit 0
